
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementleftORleftANDleftEQUALSAND BY COMMA EQUALS FROM LIMIT LPAREN NAME NUMBER OR ORDER RPAREN SELECT STAR STRING WHEREempty :statement : select postpositions\n    postpositions : LIMIT NUMBER postpositions\n                  | ORDER BY colspec postpositions\n                  | empty\n    select : SELECT colspec FROM value condition\n    colspec : STAR\n            | NAME\n            | funcapp\n            | NAME COMMA colspec\n            | funcapp COMMA colspec\n    \n    condition : WHERE expression\n              | empty\n    funcapp : NAME LPAREN colspec RPAREN\n    expression : value\n               | expression AND expression\n               | expression OR expression\n               | expression EQUALS expression\n    \n    value : NUMBER\n          | STRING\n          | NAME\n    '
    
_lr_action_items = {'SELECT':([0,],[3,]),'$end':([1,2,4,7,9,10,11,12,18,19,20,21,22,23,24,26,27,28,30,31,32,33,37,38,39,],[0,-1,-2,-5,-7,-8,-9,-1,-3,-1,-1,-19,-20,-21,-10,-11,-4,-6,-13,-14,-12,-15,-16,-17,-18,]),'LIMIT':([2,9,10,11,12,19,20,21,22,23,24,26,28,30,31,32,33,37,38,39,],[5,-7,-8,-9,5,5,-1,-19,-20,-21,-10,-11,-6,-13,-14,-12,-15,-16,-17,-18,]),'ORDER':([2,9,10,11,12,19,20,21,22,23,24,26,28,30,31,32,33,37,38,39,],[6,-7,-8,-9,6,6,-1,-19,-20,-21,-10,-11,-6,-13,-14,-12,-15,-16,-17,-18,]),'STAR':([3,13,15,16,17,],[9,9,9,9,9,]),'NAME':([3,13,14,15,16,17,29,34,35,36,],[10,10,23,10,10,10,23,23,23,23,]),'NUMBER':([5,14,29,34,35,36,],[12,21,21,21,21,21,]),'BY':([6,],[13,]),'FROM':([8,9,10,11,24,26,31,],[14,-7,-8,-9,-10,-11,-14,]),'RPAREN':([9,10,11,24,25,26,31,],[-7,-8,-9,-10,31,-11,-14,]),'COMMA':([10,11,31,],[15,17,-14,]),'LPAREN':([10,],[16,]),'STRING':([14,29,34,35,36,],[22,22,22,22,22,]),'WHERE':([20,21,22,23,],[29,-19,-20,-21,]),'AND':([21,22,23,32,33,37,38,39,],[-19,-20,-21,34,-15,-16,34,-18,]),'OR':([21,22,23,32,33,37,38,39,],[-19,-20,-21,35,-15,-16,-17,-18,]),'EQUALS':([21,22,23,32,33,37,38,39,],[-19,-20,-21,36,-15,36,36,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'select':([0,],[2,]),'postpositions':([2,12,19,],[4,18,27,]),'empty':([2,12,19,20,],[7,7,7,30,]),'colspec':([3,13,15,16,17,],[8,19,24,25,26,]),'funcapp':([3,13,15,16,17,],[11,11,11,11,11,]),'value':([14,29,34,35,36,],[20,33,33,33,33,]),'condition':([20,],[28,]),'expression':([29,34,35,36,],[32,37,38,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','__init__.py',62),
  ('statement -> select postpositions','statement',2,'p_statement_select','__init__.py',66),
  ('postpositions -> LIMIT NUMBER postpositions','postpositions',3,'p_postpositions','__init__.py',71),
  ('postpositions -> ORDER BY colspec postpositions','postpositions',4,'p_postpositions','__init__.py',72),
  ('postpositions -> empty','postpositions',1,'p_postpositions','__init__.py',73),
  ('select -> SELECT colspec FROM value condition','select',5,'p_select','__init__.py',93),
  ('colspec -> STAR','colspec',1,'p_colspec','__init__.py',104),
  ('colspec -> NAME','colspec',1,'p_colspec','__init__.py',105),
  ('colspec -> funcapp','colspec',1,'p_colspec','__init__.py',106),
  ('colspec -> NAME COMMA colspec','colspec',3,'p_colspec','__init__.py',107),
  ('colspec -> funcapp COMMA colspec','colspec',3,'p_colspec','__init__.py',108),
  ('condition -> WHERE expression','condition',2,'p_condition','__init__.py',128),
  ('condition -> empty','condition',1,'p_condition','__init__.py',129),
  ('funcapp -> NAME LPAREN colspec RPAREN','funcapp',4,'p_funcapp','__init__.py',137),
  ('expression -> value','expression',1,'p_expression','__init__.py',148),
  ('expression -> expression AND expression','expression',3,'p_expression','__init__.py',149),
  ('expression -> expression OR expression','expression',3,'p_expression','__init__.py',150),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','__init__.py',151),
  ('value -> NUMBER','value',1,'p_value','__init__.py',163),
  ('value -> STRING','value',1,'p_value','__init__.py',164),
  ('value -> NAME','value',1,'p_value','__init__.py',165),
]
