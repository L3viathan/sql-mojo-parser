Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     empty -> <empty>
Rule 2     statement -> select postpositions
Rule 3     postpositions -> LIMIT NUMBER postpositions
Rule 4     postpositions -> ORDER BY colspec postpositions
Rule 5     postpositions -> empty
Rule 6     select -> SELECT colspec FROM value condition
Rule 7     colspec -> STAR
Rule 8     colspec -> NAME
Rule 9     colspec -> funcapp
Rule 10    colspec -> NAME COMMA colspec
Rule 11    colspec -> funcapp COMMA colspec
Rule 12    condition -> WHERE expression
Rule 13    condition -> empty
Rule 14    funcapp -> NAME LPAREN colspec RPAREN
Rule 15    expression -> value
Rule 16    expression -> expression AND expression
Rule 17    expression -> expression OR expression
Rule 18    expression -> expression EQUALS expression
Rule 19    value -> NUMBER
Rule 20    value -> STRING
Rule 21    value -> NAME

Terminals, with rules where they appear

AND                  : 16
BY                   : 4
COMMA                : 10 11
EQUALS               : 18
FROM                 : 6
LIMIT                : 3
LPAREN               : 14
NAME                 : 8 10 14 21
NUMBER               : 3 19
OR                   : 17
ORDER                : 4
RPAREN               : 14
SELECT               : 6
STAR                 : 7
STRING               : 20
WHERE                : 12
error                : 

Nonterminals, with rules where they appear

colspec              : 4 6 10 11 14
condition            : 6
empty                : 5 13
expression           : 12 16 16 17 17 18 18
funcapp              : 9 11
postpositions        : 2 3 4
select               : 2
statement            : 0
value                : 6 15

Parsing method: LALR

state 0

    (0) S' -> . statement
    (2) statement -> . select postpositions
    (6) select -> . SELECT colspec FROM value condition

    SELECT          shift and go to state 3

    statement                      shift and go to state 1
    select                         shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (2) statement -> select . postpositions
    (3) postpositions -> . LIMIT NUMBER postpositions
    (4) postpositions -> . ORDER BY colspec postpositions
    (5) postpositions -> . empty
    (1) empty -> .

    LIMIT           shift and go to state 5
    ORDER           shift and go to state 6
    $end            reduce using rule 1 (empty -> .)

    postpositions                  shift and go to state 4
    empty                          shift and go to state 7

state 3

    (6) select -> SELECT . colspec FROM value condition
    (7) colspec -> . STAR
    (8) colspec -> . NAME
    (9) colspec -> . funcapp
    (10) colspec -> . NAME COMMA colspec
    (11) colspec -> . funcapp COMMA colspec
    (14) funcapp -> . NAME LPAREN colspec RPAREN

    STAR            shift and go to state 9
    NAME            shift and go to state 10

    colspec                        shift and go to state 8
    funcapp                        shift and go to state 11

state 4

    (2) statement -> select postpositions .

    $end            reduce using rule 2 (statement -> select postpositions .)


state 5

    (3) postpositions -> LIMIT . NUMBER postpositions

    NUMBER          shift and go to state 12


state 6

    (4) postpositions -> ORDER . BY colspec postpositions

    BY              shift and go to state 13


state 7

    (5) postpositions -> empty .

    $end            reduce using rule 5 (postpositions -> empty .)


state 8

    (6) select -> SELECT colspec . FROM value condition

    FROM            shift and go to state 14


state 9

    (7) colspec -> STAR .

    FROM            reduce using rule 7 (colspec -> STAR .)
    LIMIT           reduce using rule 7 (colspec -> STAR .)
    ORDER           reduce using rule 7 (colspec -> STAR .)
    $end            reduce using rule 7 (colspec -> STAR .)
    RPAREN          reduce using rule 7 (colspec -> STAR .)


state 10

    (8) colspec -> NAME .
    (10) colspec -> NAME . COMMA colspec
    (14) funcapp -> NAME . LPAREN colspec RPAREN

    FROM            reduce using rule 8 (colspec -> NAME .)
    LIMIT           reduce using rule 8 (colspec -> NAME .)
    ORDER           reduce using rule 8 (colspec -> NAME .)
    $end            reduce using rule 8 (colspec -> NAME .)
    RPAREN          reduce using rule 8 (colspec -> NAME .)
    COMMA           shift and go to state 15
    LPAREN          shift and go to state 16


state 11

    (9) colspec -> funcapp .
    (11) colspec -> funcapp . COMMA colspec

    FROM            reduce using rule 9 (colspec -> funcapp .)
    LIMIT           reduce using rule 9 (colspec -> funcapp .)
    ORDER           reduce using rule 9 (colspec -> funcapp .)
    $end            reduce using rule 9 (colspec -> funcapp .)
    RPAREN          reduce using rule 9 (colspec -> funcapp .)
    COMMA           shift and go to state 17


state 12

    (3) postpositions -> LIMIT NUMBER . postpositions
    (3) postpositions -> . LIMIT NUMBER postpositions
    (4) postpositions -> . ORDER BY colspec postpositions
    (5) postpositions -> . empty
    (1) empty -> .

    LIMIT           shift and go to state 5
    ORDER           shift and go to state 6
    $end            reduce using rule 1 (empty -> .)

    postpositions                  shift and go to state 18
    empty                          shift and go to state 7

state 13

    (4) postpositions -> ORDER BY . colspec postpositions
    (7) colspec -> . STAR
    (8) colspec -> . NAME
    (9) colspec -> . funcapp
    (10) colspec -> . NAME COMMA colspec
    (11) colspec -> . funcapp COMMA colspec
    (14) funcapp -> . NAME LPAREN colspec RPAREN

    STAR            shift and go to state 9
    NAME            shift and go to state 10

    colspec                        shift and go to state 19
    funcapp                        shift and go to state 11

state 14

    (6) select -> SELECT colspec FROM . value condition
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . NAME

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    NAME            shift and go to state 23

    value                          shift and go to state 20

state 15

    (10) colspec -> NAME COMMA . colspec
    (7) colspec -> . STAR
    (8) colspec -> . NAME
    (9) colspec -> . funcapp
    (10) colspec -> . NAME COMMA colspec
    (11) colspec -> . funcapp COMMA colspec
    (14) funcapp -> . NAME LPAREN colspec RPAREN

    STAR            shift and go to state 9
    NAME            shift and go to state 10

    colspec                        shift and go to state 24
    funcapp                        shift and go to state 11

state 16

    (14) funcapp -> NAME LPAREN . colspec RPAREN
    (7) colspec -> . STAR
    (8) colspec -> . NAME
    (9) colspec -> . funcapp
    (10) colspec -> . NAME COMMA colspec
    (11) colspec -> . funcapp COMMA colspec
    (14) funcapp -> . NAME LPAREN colspec RPAREN

    STAR            shift and go to state 9
    NAME            shift and go to state 10

    colspec                        shift and go to state 25
    funcapp                        shift and go to state 11

state 17

    (11) colspec -> funcapp COMMA . colspec
    (7) colspec -> . STAR
    (8) colspec -> . NAME
    (9) colspec -> . funcapp
    (10) colspec -> . NAME COMMA colspec
    (11) colspec -> . funcapp COMMA colspec
    (14) funcapp -> . NAME LPAREN colspec RPAREN

    STAR            shift and go to state 9
    NAME            shift and go to state 10

    funcapp                        shift and go to state 11
    colspec                        shift and go to state 26

state 18

    (3) postpositions -> LIMIT NUMBER postpositions .

    $end            reduce using rule 3 (postpositions -> LIMIT NUMBER postpositions .)


state 19

    (4) postpositions -> ORDER BY colspec . postpositions
    (3) postpositions -> . LIMIT NUMBER postpositions
    (4) postpositions -> . ORDER BY colspec postpositions
    (5) postpositions -> . empty
    (1) empty -> .

    LIMIT           shift and go to state 5
    ORDER           shift and go to state 6
    $end            reduce using rule 1 (empty -> .)

    postpositions                  shift and go to state 27
    empty                          shift and go to state 7

state 20

    (6) select -> SELECT colspec FROM value . condition
    (12) condition -> . WHERE expression
    (13) condition -> . empty
    (1) empty -> .

    WHERE           shift and go to state 29
    LIMIT           reduce using rule 1 (empty -> .)
    ORDER           reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    condition                      shift and go to state 28
    empty                          shift and go to state 30

state 21

    (19) value -> NUMBER .

    WHERE           reduce using rule 19 (value -> NUMBER .)
    LIMIT           reduce using rule 19 (value -> NUMBER .)
    ORDER           reduce using rule 19 (value -> NUMBER .)
    $end            reduce using rule 19 (value -> NUMBER .)
    AND             reduce using rule 19 (value -> NUMBER .)
    OR              reduce using rule 19 (value -> NUMBER .)
    EQUALS          reduce using rule 19 (value -> NUMBER .)


state 22

    (20) value -> STRING .

    WHERE           reduce using rule 20 (value -> STRING .)
    LIMIT           reduce using rule 20 (value -> STRING .)
    ORDER           reduce using rule 20 (value -> STRING .)
    $end            reduce using rule 20 (value -> STRING .)
    AND             reduce using rule 20 (value -> STRING .)
    OR              reduce using rule 20 (value -> STRING .)
    EQUALS          reduce using rule 20 (value -> STRING .)


state 23

    (21) value -> NAME .

    WHERE           reduce using rule 21 (value -> NAME .)
    LIMIT           reduce using rule 21 (value -> NAME .)
    ORDER           reduce using rule 21 (value -> NAME .)
    $end            reduce using rule 21 (value -> NAME .)
    AND             reduce using rule 21 (value -> NAME .)
    OR              reduce using rule 21 (value -> NAME .)
    EQUALS          reduce using rule 21 (value -> NAME .)


state 24

    (10) colspec -> NAME COMMA colspec .

    FROM            reduce using rule 10 (colspec -> NAME COMMA colspec .)
    LIMIT           reduce using rule 10 (colspec -> NAME COMMA colspec .)
    ORDER           reduce using rule 10 (colspec -> NAME COMMA colspec .)
    $end            reduce using rule 10 (colspec -> NAME COMMA colspec .)
    RPAREN          reduce using rule 10 (colspec -> NAME COMMA colspec .)


state 25

    (14) funcapp -> NAME LPAREN colspec . RPAREN

    RPAREN          shift and go to state 31


state 26

    (11) colspec -> funcapp COMMA colspec .

    FROM            reduce using rule 11 (colspec -> funcapp COMMA colspec .)
    LIMIT           reduce using rule 11 (colspec -> funcapp COMMA colspec .)
    ORDER           reduce using rule 11 (colspec -> funcapp COMMA colspec .)
    $end            reduce using rule 11 (colspec -> funcapp COMMA colspec .)
    RPAREN          reduce using rule 11 (colspec -> funcapp COMMA colspec .)


state 27

    (4) postpositions -> ORDER BY colspec postpositions .

    $end            reduce using rule 4 (postpositions -> ORDER BY colspec postpositions .)


state 28

    (6) select -> SELECT colspec FROM value condition .

    LIMIT           reduce using rule 6 (select -> SELECT colspec FROM value condition .)
    ORDER           reduce using rule 6 (select -> SELECT colspec FROM value condition .)
    $end            reduce using rule 6 (select -> SELECT colspec FROM value condition .)


state 29

    (12) condition -> WHERE . expression
    (15) expression -> . value
    (16) expression -> . expression AND expression
    (17) expression -> . expression OR expression
    (18) expression -> . expression EQUALS expression
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . NAME

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    NAME            shift and go to state 23

    expression                     shift and go to state 32
    value                          shift and go to state 33

state 30

    (13) condition -> empty .

    LIMIT           reduce using rule 13 (condition -> empty .)
    ORDER           reduce using rule 13 (condition -> empty .)
    $end            reduce using rule 13 (condition -> empty .)


state 31

    (14) funcapp -> NAME LPAREN colspec RPAREN .

    COMMA           reduce using rule 14 (funcapp -> NAME LPAREN colspec RPAREN .)
    FROM            reduce using rule 14 (funcapp -> NAME LPAREN colspec RPAREN .)
    LIMIT           reduce using rule 14 (funcapp -> NAME LPAREN colspec RPAREN .)
    ORDER           reduce using rule 14 (funcapp -> NAME LPAREN colspec RPAREN .)
    $end            reduce using rule 14 (funcapp -> NAME LPAREN colspec RPAREN .)
    RPAREN          reduce using rule 14 (funcapp -> NAME LPAREN colspec RPAREN .)


state 32

    (12) condition -> WHERE expression .
    (16) expression -> expression . AND expression
    (17) expression -> expression . OR expression
    (18) expression -> expression . EQUALS expression

    LIMIT           reduce using rule 12 (condition -> WHERE expression .)
    ORDER           reduce using rule 12 (condition -> WHERE expression .)
    $end            reduce using rule 12 (condition -> WHERE expression .)
    AND             shift and go to state 34
    OR              shift and go to state 35
    EQUALS          shift and go to state 36


state 33

    (15) expression -> value .

    AND             reduce using rule 15 (expression -> value .)
    OR              reduce using rule 15 (expression -> value .)
    EQUALS          reduce using rule 15 (expression -> value .)
    LIMIT           reduce using rule 15 (expression -> value .)
    ORDER           reduce using rule 15 (expression -> value .)
    $end            reduce using rule 15 (expression -> value .)


state 34

    (16) expression -> expression AND . expression
    (15) expression -> . value
    (16) expression -> . expression AND expression
    (17) expression -> . expression OR expression
    (18) expression -> . expression EQUALS expression
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . NAME

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    NAME            shift and go to state 23

    expression                     shift and go to state 37
    value                          shift and go to state 33

state 35

    (17) expression -> expression OR . expression
    (15) expression -> . value
    (16) expression -> . expression AND expression
    (17) expression -> . expression OR expression
    (18) expression -> . expression EQUALS expression
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . NAME

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    NAME            shift and go to state 23

    expression                     shift and go to state 38
    value                          shift and go to state 33

state 36

    (18) expression -> expression EQUALS . expression
    (15) expression -> . value
    (16) expression -> . expression AND expression
    (17) expression -> . expression OR expression
    (18) expression -> . expression EQUALS expression
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . NAME

    NUMBER          shift and go to state 21
    STRING          shift and go to state 22
    NAME            shift and go to state 23

    expression                     shift and go to state 39
    value                          shift and go to state 33

state 37

    (16) expression -> expression AND expression .
    (16) expression -> expression . AND expression
    (17) expression -> expression . OR expression
    (18) expression -> expression . EQUALS expression

    AND             reduce using rule 16 (expression -> expression AND expression .)
    OR              reduce using rule 16 (expression -> expression AND expression .)
    LIMIT           reduce using rule 16 (expression -> expression AND expression .)
    ORDER           reduce using rule 16 (expression -> expression AND expression .)
    $end            reduce using rule 16 (expression -> expression AND expression .)
    EQUALS          shift and go to state 36

  ! EQUALS          [ reduce using rule 16 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 34 ]
  ! OR              [ shift and go to state 35 ]


state 38

    (17) expression -> expression OR expression .
    (16) expression -> expression . AND expression
    (17) expression -> expression . OR expression
    (18) expression -> expression . EQUALS expression

    OR              reduce using rule 17 (expression -> expression OR expression .)
    LIMIT           reduce using rule 17 (expression -> expression OR expression .)
    ORDER           reduce using rule 17 (expression -> expression OR expression .)
    $end            reduce using rule 17 (expression -> expression OR expression .)
    AND             shift and go to state 34
    EQUALS          shift and go to state 36

  ! AND             [ reduce using rule 17 (expression -> expression OR expression .) ]
  ! EQUALS          [ reduce using rule 17 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 35 ]


state 39

    (18) expression -> expression EQUALS expression .
    (16) expression -> expression . AND expression
    (17) expression -> expression . OR expression
    (18) expression -> expression . EQUALS expression

    AND             reduce using rule 18 (expression -> expression EQUALS expression .)
    OR              reduce using rule 18 (expression -> expression EQUALS expression .)
    EQUALS          reduce using rule 18 (expression -> expression EQUALS expression .)
    LIMIT           reduce using rule 18 (expression -> expression EQUALS expression .)
    ORDER           reduce using rule 18 (expression -> expression EQUALS expression .)
    $end            reduce using rule 18 (expression -> expression EQUALS expression .)

  ! AND             [ shift and go to state 34 ]
  ! OR              [ shift and go to state 35 ]
  ! EQUALS          [ shift and go to state 36 ]

